<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xuxuzhaozhao2015.github.io</id>
    <title>xuxuzhaozhao</title>
    <updated>2020-01-02T01:51:23.869Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xuxuzhaozhao2015.github.io"/>
    <link rel="self" href="https://xuxuzhaozhao2015.github.io/atom.xml"/>
    <subtitle>Aspire to inspire until I expire.</subtitle>
    <logo>https://xuxuzhaozhao2015.github.io/images/avatar.png</logo>
    <icon>https://xuxuzhaozhao2015.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, xuxuzhaozhao</rights>
    <entry>
        <title type="html"><![CDATA[在阿里云 Centos 7 上部署docker redis、mysql 8.0.18]]></title>
        <id>https://xuxuzhaozhao2015.github.io/post/linuxdeployredis</id>
        <link href="https://xuxuzhaozhao2015.github.io/post/linuxdeployredis">
        </link>
        <updated>2020-01-02T01:43:09.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>记得在阿里云控制端中将3306与6379端口加入安全组。</p>
</blockquote>
<hr>
<h2 id="redis">redis😀</h2>
<h3 id="1-获取redis">1、获取redis</h3>
<ul>
<li>docker search redis</li>
<li>docker pull redis:latest</li>
<li>docker images</li>
</ul>
<h3 id="2-创建宿主机">2、创建宿主机</h3>
<pre><code># 在根目录新建两个数据卷文件夹
mkdir /home/docker/redis/{conf,data} -p
cd /home/docker/redis/conf

# 获取默认的redis.conf模版
wget http://download.redis.io/redis-stable/redis.conf

# 编辑redis.conf
requirepass fuckyouhacker #必须使用密码
appendonly yes #数据append
logfile &quot;access.log&quot; #日志记录文件名

# 远程访问 注释掉 127.0.0.1
# bind 127.0.0.1
protected-mode no # 启用远程访问

# 退出conf进入/home/docker/redis
cd ..
</code></pre>
<h3 id="3-运行redis">3、运行redis</h3>
<pre><code># 命令分解
docker run \
-p 6379:6379 \ # 端口映射 宿主机:容器
-v $PWD/data:/data:rw \ # 映射数据目录 rw 为读写，必须使用绝对路径
-v $PWD/conf/redis.conf:/etc/redis/redis.conf:ro \ # 挂载配置文件 ro 为readonly，必须使用绝对路径
--privileged=true \ # 给与一些权限
--name myredis \ # 给容器起个名字
-d redis /etc/redis/redis.conf # deamon 运行容器
</code></pre>
<h3 id="4-查看-myredis">4、查看 <code>myredis</code></h3>
<pre><code>docker images

# 如果没有看到任何容器，则说明出错了，使用以下命令查看日志
docker logs myredis

# 查看 myredis 的 ip 挂载 端口映射等信息
docker inspect myredis
# 查看 myredis 的端口映射
docker port myredis
</code></pre>
<h3 id="5-进入myredis">5、进入<code>myredis</code></h3>
<pre><code>[root@iZuf68eahm3loty2bz4uq1Z redis]# docker exec -it myredis /bin/bash
root@338dc6c82e1e:/data# redis-cli
</code></pre>
<h3 id="6-客户端连接">6、客户端连接</h3>
<pre><code>redis-cli -h 47.102.xxx.xxx -p 6379
47.102.xxx.xxx:6379&gt;auth fuckhacker
</code></pre>
<p>开源客户端：<br>
https://github.com/qishibo/AnotherRedisDesktopManager/releases</p>
<hr>
<h2 id="mysql-8018">mysql 8.0.18</h2>
<h3 id="1-拉取镜像">1、拉取镜像</h3>
<pre><code>docker image pull mysql:8.0.18
</code></pre>
<h3 id="2-创建-mysql-数据文件和配置文件-目录">2、创建 MySQL 数据文件和配置文件 目录。</h3>
<pre><code># 宿主机创建 MySQL conf、data 目录
mkdir -p /home/data/docker/mysql/{conf,data}

# 创建一个 MySQL 容器（临时的，只是为了复制文件）
docker run --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.18

# 复制容器中 MySQL data 到宿主机
docker cp mysql:/var/lib/mysql /root/docker/mysql/data

# 复制容器中 MySQL 配置文件到宿主机
docker cp mysql:/etc/mysql/my.cnf /root/docker/mysql/conf/my.cnf

# 删除临时的 MySQL 容器
docker rm -f mysql
</code></pre>
<h3 id="3-创建运行-mysql-容器">3、创建运行 MySQL 容器</h3>
<pre><code>cd /root/docker/mysql

docker run \
    -p 3306:3306 \
    -e MYSQL_ROOT_PASSWORD=123456 \
    -e TZ=Asia/Shanghai \
    -v /etc/localtime:/etc/localtime:ro \
    -v $PWD/data/mysql:/var/lib/mysql \
    -v $PWD/conf/my.cnf:/etc/mysql/my.cnf \
    --name eladmin \
    --privileged=true \
    --restart=always \
    -d mysql
    
参数说明：

-p 3306:3306 容器 3306 端口映射到主机 3306 端口
-e MYSQL_ROOT_PASSWORD=123456 指定 MySQL 初始密码
-e TZ=Asia/Shanghai 设置容器默认时区
-v /etc/localtime:/etc/localtime:ro 设置容器时间与宿主机时间同步
-v /home/data/docker/mysql/data/mysql:/var/lib/mysql 将容器 mysql data 目录挂载到宿主机
-v /home/data/docker/mysql/conf/my.cnf:/etc/mysql/my.cnf 将容器 mysql 配置文件挂载到宿主机
--name mysql_8.0.18 设置容器名称
--restart=always Docker 服务启动后，自动启动该容器
--privileged=true 让容器中 root 用户拥有 root 权限，默认只有普通用户权限
-d 后台运行容器，并返回容器ID
mysql:8.0.18 镜像名，不加版本号，会使用最新版本
</code></pre>
<h3 id="4-进入容器修改初始密码开启远程连接">4、进入容器修改初始密码，开启远程连接</h3>
<pre><code># 进入容器
docker exec -it mysql_8.0.18 /bin/sh

# 容器内执行，输入初始密码（如果初始密码不可以，不输密码直接敲回车试试）
mysql -u root -p

# 指定数据库
mysql&gt; use mysql;

# 修改初始密码，改变密码验证方式为 mysql_native_password 
mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'P@ssw0rd';

# 修改初始密码，改变密码验证方式为 mysql_native_password 
mysql&gt; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'P@ssw0rd';

# 如果上面的 sql 出错，执行
mysql&gt; update user set host = '%' where user = 'root';

mysql&gt; FLUSH PRIVILEGES;

# 执行完以上命令，验证一下
mysql&gt; select host,user,plugin from user where user = 'root';
+-----------+------+-----------------------+
| host      | user | plugin                |
+-----------+------+-----------------------+
| %         | root | mysql_native_password |
+-----------+------+-----------------------+
</code></pre>
]]></content>
    </entry>
</feed>